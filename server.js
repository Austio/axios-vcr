const fs = require('fs')
const path = require('path')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const HTMLStream = require('vue-ssr-html-stream')
const resolve = file => path.resolve(__dirname, file)

const isProd = process.env.NODE_ENV === 'production'
const isTest = process.env.NODE_ENV === 'testing'
const serverHeaderInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

let template // generated by html-webpack-plugin
let renderer  // created from the webpack-generated server bundle
if (isProd || isTest) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(require('./dist/vue-ssr-bundle.json'))
  template = fs.readFileSync(resolve('./dist/index.html'), 'utf-8')
} else {
  // in development: setup watch & hot-reload, and update renderer / indexHTML on filechange.
  require('./build/setup-dev-server')(app, {
    bundleUpdated: bundle => { renderer = createRenderer(bundle) },
    templateUpdated: _template => { template = _template }
  })
}

// https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
function createRenderer (bundle) {
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

function serve (path, cache) {
  return express.static(resolve(path), {
    maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
  })
}

// Setup all of our static file serves (public/manifest, dist)
app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist'))
app.use('/public', serve('./public'))
// app.use('/manifest.json', serve('./manifest.json'))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

app.get('*', (req, res) => {
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  var s = Date.now()
  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverHeaderInfo)

  const errorHandler = err => {
    if (err && err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).end('Internal Error 500')
      console.error(`error during render : ${req.url}`)
      console.error(err)
    }
  }

  const context = { url: req.url }
  const htmlStream = new HTMLStream({ template, context })

  renderer.renderToStream(context)
    .on('error', errorHandler)
    .pipe(htmlStream)
    .on('end', () => console.log(`whole request: ${Date.now() - s}ms`))
    .pipe(res)
})

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
